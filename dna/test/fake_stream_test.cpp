#include "catch.hpp"
#include "fake_person.hpp"
#include <iostream>

template<class P>
class person_tester
{
	std::reference_wrapper<std::ostream> writer_;
	std::reference_wrapper<P> person_;
public:
	person_tester(std::ostream& writer, P& person) :
			writer_(writer),
			person_(person)
	{ }

	void dump_chromosomes()
	{
		for (std::size_t i = 0; i < person_.get().chromosomes(); ++i)
		{
			writer_.get() << "Chromosome " << (i + 1) << ": ";
			auto chrom = person_.get().chromosome(i);

			while (true)
			{
				auto buf = chrom.read();
				if (buf.size() == 0)
					break;
				writer_.get() << buf;
			}

			writer_.get() << "\n";
		}

		writer_.get().flush();
	}
};

int rawdata[] = {
		0x5a, 0xe3, 0x3e, 0x3f, 0x8d, 0xed, 0x4d, 0x64, 0xa5, 0x68, 0x0b, 0x29, 0x30, 0x60, 0x3e, 0x07, 0xa8, 0x68, 0x03, 0x7b, 0x63, 0xe8, 0x35, 0xbb,
		0xa5, 0xdb, 0x85, 0x14, 0x3f, 0xf5, 0x50, 0x79, 0x52, 0xb7, 0x9a, 0x97, 0x01, 0x4a, 0x57, 0xc3, 0x74, 0x4f, 0xa4, 0xe6, 0xb7, 0xbc, 0x4a, 0xd0,
		0x55, 0x89, 0x52, 0x8c, 0x57, 0xa7, 0x28, 0xf3, 0x16, 0xd5, 0x68, 0x12, 0xe5, 0x70, 0xbb, 0x41, 0xec, 0x9f, 0xad, 0x6f, 0xed, 0xca, 0xec, 0x38,
		0x13, 0x98, 0x8e, 0x54, 0xcf, 0xb1, 0xec, 0xcf, 0x5a, 0xae, 0x6d, 0x81, 0x55, 0x25, 0x5c, 0xf2, 0x5f, 0x1f, 0x76, 0x9e, 0x5e, 0xa1, 0x11, 0x2e,
		0x00, 0x00, 0x92, 0x1e, 0xe3, 0x29, 0x2a, 0xb2, 0x5a, 0x6d, 0xbe, 0xdc, 0x83, 0x3f, 0x85, 0xe4, 0x34, 0x08, 0x71, 0x98, 0x5c, 0x70, 0xc8, 0x6b,
		0x5a, 0x31, 0xd5, 0xae, 0x65, 0xed, 0xef, 0x17, 0xd3, 0x0a, 0xe3, 0xaa, 0x5b, 0x47, 0x5f, 0x69, 0x85, 0x3f, 0x4e, 0x50, 0xbc, 0x4d, 0xfa, 0x8d,
		0xa8, 0x7f, 0xa6, 0x93, 0xc2, 0x27, 0x97, 0x29, 0x6f, 0xcc, 0x0a, 0x0d, 0x78, 0x3c, 0xdb, 0xf4, 0xb0, 0xb4, 0xf2, 0xbe, 0x0d, 0x57, 0x8e, 0x70,
		0x6c, 0xad, 0xb4, 0x84, 0x89, 0x72, 0xc9, 0x9e, 0x2c, 0x70, 0xfb, 0x00, 0xe2, 0xaf, 0x63, 0xd2, 0xe6, 0xd1, 0x7f, 0x08, 0x39, 0x70, 0x77, 0x40,
		0x4f, 0x26, 0x7b, 0x11, 0xdd, 0x32, 0xbd, 0x47, 0x97, 0xb6, 0xa2, 0x97, 0x1e, 0x9e, 0xa8, 0x06, 0x43, 0xf4, 0x51, 0xe2, 0x10, 0x1c, 0x74, 0xaa,
		0x87, 0x0e, 0xf2, 0xc4, 0x87, 0xea, 0xb6, 0x76, 0x93, 0xb8, 0x6b, 0x77, 0x3d, 0x86, 0x06, 0x0b, 0xe7, 0xfa, 0x0d, 0xdf, 0x39, 0x95, 0xae, 0x50,
		0x98, 0x52, 0x8e, 0x92, 0x16, 0x56, 0xab, 0xa1, 0x10, 0x0e, 0x6d, 0x9e, 0xca, 0x81, 0xd4, 0xb0, 0xb7, 0x11, 0x5f, 0x7a, 0xdd, 0x42, 0x84, 0xb8,
		0x19, 0xdb, 0xd0, 0x47, 0x1c, 0x44, 0x75, 0x61, 0x69, 0x67, 0x89, 0xe2, 0xe9, 0x6e, 0x75, 0xb4, 0xa6, 0x16, 0x95, 0x95, 0x04, 0xbe, 0x4a, 0x25,
		0xfe, 0x56, 0x59, 0xd7, 0x5d, 0xe5, 0x40, 0xaa, 0xf3, 0xdb, 0x34, 0xb7, 0x79, 0xc3, 0x63, 0x9c, 0x65, 0xad, 0x2f, 0xed, 0xfd, 0xf6, 0xec, 0x0f,
		0x1a, 0xdd, 0x5b, 0x38, 0x11, 0x00, 0x3f, 0xd0, 0x28, 0xf9, 0x8c, 0x0e, 0x98, 0x44, 0xb9, 0xdf, 0x41, 0x45, 0x93, 0xf7, 0x14, 0x62, 0x96, 0x5f,
		0x83, 0xc9, 0xd0, 0x86, 0x2b, 0x03, 0xb1, 0x6e, 0x97, 0xe3, 0x38, 0x3c, 0xed, 0x3e, 0x2c, 0x89, 0x4d, 0xa8, 0x3e, 0xd4, 0xeb, 0x3f, 0x73, 0x06,
		0xad, 0xef, 0x0b, 0x4b, 0xcc, 0x0f, 0x39, 0x06, 0x78, 0xa6, 0x16, 0xdf, 0xda, 0xc7, 0x99, 0x8e, 0x17, 0xe1, 0x59, 0xd7, 0xf2, 0x1e, 0xe8, 0xb4,
		0x7d, 0xc8, 0xb2, 0x5a, 0x08, 0x59, 0x54, 0x5c, 0xb8, 0x79, 0x32, 0x0d, 0xe7, 0xed, 0x85, 0x19, 0x4f, 0xdb, 0x9b, 0x15, 0x23, 0xbe, 0x79, 0xdc,
		0x29, 0x81, 0xf6, 0x60, 0x94, 0xeb, 0x92, 0x5e, 0x1d, 0x0c, 0x6e, 0x5e, 0x6e, 0x61, 0x7c, 0x31, 0x6d, 0x05, 0xa3, 0x24, 0x8f, 0x73, 0x57, 0xb1,
		0x9a, 0xba, 0x72, 0x86, 0xf3, 0xf7, 0x87, 0xd1, 0x8a, 0x67, 0x12, 0x5b, 0xac, 0xd6, 0xbc, 0x0b, 0xc3, 0x83, 0x5f, 0x13, 0xd8, 0xae, 0xe5, 0xe3,
		0xa6, 0x95, 0x45, 0xf7, 0xea, 0xf6, 0x6a, 0x32, 0x5b, 0x5c, 0x6d, 0xfd, 0x79, 0xd4, 0xe7, 0xae, 0xa8, 0xa7, 0xe0, 0x5a, 0xba, 0xe2, 0x4a, 0x59,
		0xd3, 0xec, 0x69, 0x43, 0xae, 0x17, 0x36, 0xcc, 0xf7, 0x85, 0x5e, 0xa1, 0xff, 0xd3, 0x62, 0x96, 0x69, 0x96, 0x78, 0x1d, 0xf8, 0x61, 0x58, 0xdd,
		0x42, 0x1e, 0xef, 0xe0, 0x8d, 0xea, 0x3f, 0x6c, 0x1f, 0x98, 0x43, 0x53, 0xdd, 0xe5, 0x4b, 0x59, 0x72, 0x28, 0x23, 0x43, 0x11, 0x6d, 0x7c, 0xc9,
		0xe9, 0x27, 0x5d, 0xf4, 0xe1, 0xf6, 0xe3, 0xfc, 0x00, 0x87, 0x3a, 0x94, 0x23, 0x04, 0x76, 0x77, 0x35, 0x01, 0xbf, 0xbc, 0xc3, 0xe8, 0xc9, 0x1c,
		0x6b, 0x4e, 0xcf, 0x46, 0x0a, 0x2f, 0xce, 0x07, 0xea, 0x15, 0xf9, 0x0b, 0x99, 0xb5, 0xe2, 0xda, 0xca, 0x65, 0x6e, 0xd9, 0xb5, 0x5c, 0x66, 0xcc,
		0xde, 0x26, 0x05, 0x64, 0xdc, 0xf2, 0x87, 0x3f, 0x46, 0xec, 0xda, 0x15, 0xea, 0x62, 0x16, 0xca, 0xb9, 0x86, 0xfe, 0x8a, 0xec, 0x8a, 0x56, 0xdb,
		0xdc, 0x74, 0x08, 0x9e, 0x66, 0x10, 0x16, 0x73, 0x66, 0x7d, 0x5e, 0x41, 0x82, 0xaf, 0xba, 0x7d, 0x6a, 0x7d, 0xcf, 0xe9, 0x67, 0x83, 0xab, 0x16,
		0x79, 0x44, 0x8d, 0xf5, 0x52, 0x5d, 0x65, 0x01, 0x0d, 0x25, 0x19, 0xed, 0x09, 0x29, 0x9d, 0xba, 0xb0, 0x52, 0xc0, 0x8e, 0x24, 0x80, 0xc2, 0x03,
		0x9d, 0x0f, 0x9a, 0xec, 0x2d, 0x25, 0xf3, 0xc4, 0xea, 0x79, 0x75, 0xd0, 0xee, 0x48, 0xd0, 0xe5, 0x99, 0x4e, 0x95, 0xab, 0xcf, 0x4d, 0xce, 0xd2,
		0xfe, 0xf5, 0x42, 0xd1, 0x5c, 0x7a, 0x9d, 0x76, 0xc7, 0x38, 0xd0, 0x2c, 0x2a, 0x25, 0x10, 0xdb, 0x8e, 0x3b, 0xda, 0x24, 0x34, 0xb6, 0x6d, 0x31,
		0x71, 0x88, 0xd7, 0x2c, 0xbc, 0x76, 0xf3, 0xe7, 0x58, 0xa0, 0xdd, 0x1a, 0xa4, 0x3a, 0x90, 0xf7, 0xf4, 0x9b, 0xc3, 0x61, 0x3f, 0xa1, 0x22, 0xa0,
		0x1b, 0x11, 0xab, 0xe0, 0xb1, 0xda, 0xf5, 0xc5, 0x91, 0x0b, 0x36, 0x72, 0x59, 0x14, 0x63, 0x9a, 0x7d, 0x4b, 0xe9, 0xe7, 0x6c, 0xec, 0xde, 0x09,
		0xb5, 0x5d, 0x3a, 0x41, 0xb6, 0x0b, 0xeb, 0x1f, 0x5d, 0xdc, 0x78, 0x05, 0x9d, 0x17, 0xc9, 0x01, 0x45, 0x3f, 0xe1, 0xd1, 0xdb, 0x2d, 0x89, 0x3d,
		0x50, 0x78, 0xcd, 0xca, 0x1c, 0x11, 0x1a, 0x19, 0xcb, 0xb2, 0x80, 0x17, 0x5a, 0xff, 0x38, 0x55, 0x80, 0xb3, 0x2e, 0x5f, 0xb4, 0x49, 0xf9, 0x93,
		0xe8, 0x68, 0x3e, 0xb6, 0x38, 0xdd, 0xd2, 0xc7, 0xd7, 0xdc, 0xdd, 0xb2, 0x58, 0x18, 0x08, 0x87, 0xfb, 0x05, 0x0d, 0xc4, 0x90, 0x76, 0x50, 0x2a,
		0x69, 0xd2, 0x0a, 0x1a, 0x56, 0x9d, 0x3e, 0x78, 0xbd, 0x6e, 0xa2, 0xee, 0xc7, 0xc9, 0xc4, 0x7c, 0xcf, 0xc3, 0x29, 0x4e, 0x59, 0x7f, 0xe7, 0x87,
		0x3a, 0xda, 0x89, 0x24, 0x22, 0x36, 0x8c, 0x8e, 0x6f, 0x4f, 0xd9, 0x77, 0xa3, 0xde, 0x48, 0xdb, 0xae, 0x13, 0xd9, 0x23, 0xd8, 0x17, 0xe8, 0xd9,
		0x7f, 0x2b, 0x0a, 0x31, 0x90, 0xd3, 0x76, 0x19, 0x65, 0x97, 0x28, 0xd1, 0xb1, 0x44, 0x61, 0xa8, 0x28, 0x17, 0xb4, 0xee, 0xde, 0xfe, 0x96, 0x53,
		0x74, 0x50, 0xe0, 0x56, 0x4f, 0xd8, 0x95, 0x9c, 0xf6, 0x8c, 0x03, 0xc9, 0x40, 0xa7, 0xb9, 0x67, 0x1a, 0xf4, 0x0b, 0xdf, 0xcc, 0x87, 0xe6, 0x53,
		0xe2, 0xe6, 0x21, 0xce, 0x83, 0xde, 0x28, 0x39, 0x9c, 0xea, 0xc4, 0x27, 0xaa, 0xd3, 0xc7, 0x2f, 0x39, 0x48, 0xa5, 0x4d, 0x10, 0x0f, 0x68, 0xec,
		0x53, 0xf7, 0x59, 0x8b, 0x82, 0xd9, 0x0d, 0xd2, 0xe4, 0x48, 0xd5, 0x1e, 0x19, 0x27, 0xc9, 0x11, 0x63, 0xe4, 0x4f, 0x9f, 0x89, 0x8d, 0xe5, 0x35,
		0xa1, 0x57, 0x21, 0x42, 0xd4, 0xe7, 0xe9, 0x5a, 0x39, 0x3c, 0x0d, 0x02, 0xe5, 0xfb, 0xb7, 0xca, 0x48, 0x52, 0x8e, 0x7c, 0x09, 0xc5, 0x2a, 0xbe,
		0x3e, 0x4e, 0x7c, 0x5a, 0xdb, 0x96, 0xb7, 0x0b, 0x60, 0x7d, 0x85, 0x03, 0x63, 0xbe, 0x68, 0xf7, 0x4d, 0xd2, 0xaf, 0x6e, 0xbd, 0x96, 0xd5, 0x35,
		0xa0, 0xb3, 0x2c, 0x48, 0x37, 0xd7, 0x6f, 0xfb, 0x67, 0xe8, 0xab, 0xb5
};

std::vector<std::byte> fake_data()
{
	std::vector<std::byte> data(1020);
	for (int i = 0; i < 1020; i++)
		data[i] = static_cast<std::byte>(rawdata[i]);
	return data;
}

TEST_CASE("Fake stream is suitable for testing", "[stream]")
{
	auto data = fake_data();
	fake_stream stream(std::move(data), 128);

	REQUIRE(stream.size() == 1020);
	for (int i = 0; i < 7; i++)
	{
		auto seq = stream.read();
		REQUIRE(seq.size() == 512);
		INFO(seq);
	}

	auto endseq = stream.read();
	REQUIRE(endseq.size() == 496);
	INFO(endseq);

	stream.seek(1018);
	endseq = stream.read();
	REQUIRE(endseq.size() == 8);
	REQUIRE(endseq[0] == dna::G);
	REQUIRE(endseq[1] == dna::G);
	REQUIRE(endseq[2] == dna::G);
	REQUIRE(endseq[3] == dna::T);
	REQUIRE(endseq[4] == dna::G);
	REQUIRE(endseq[5] == dna::T);
	REQUIRE(endseq[6] == dna::C);
	REQUIRE(endseq[7] == dna::C);
}

TEST_CASE("Fake person fulfills Person concept", "[stream]")
{
	fake_person person(std::array<std::vector<std::byte>, 23> {
			fake_data(), fake_data(), fake_data(), fake_data(), fake_data(), fake_data(),
			fake_data(), fake_data(), fake_data(), fake_data(), fake_data(), fake_data(),
			fake_data(), fake_data(), fake_data(), fake_data(), fake_data(), fake_data(),
			fake_data(), fake_data(), fake_data(), fake_data(), fake_data()
	});

	person_tester<fake_person> tester(std::cout, person);
	//tester.dump_chromosomes();
}

